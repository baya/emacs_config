;; Object semantic.cache
;; SEMANTICDB Tags save file
(semanticdb-project-database "semantic.cache"
  :file "semantic.cache"
  :tables (list 
   (semanticdb-table "git.el"
    :file "git.el"
    :pointmax 71793
    :major-mode 'emacs-lisp-mode
    :tokens '(("eval-when-compile" code nil [1711 1744]) ("ewoc" include nil nil nil [1746 1761]) ("log-edit" include nil nil nil [1763 1782]) ("easymenu" include nil nil nil [1784 1803]) ("defgroup" code nil [1896 1984]) ("git-committer-name" variable nil nil nil "User name to use for commits.
 The default is to fall back to the repository config,
 then to `add-log-full-name' and then to `user-full-name'." nil [1987 2270]) ("git-committer-email" variable nil nil nil "Email address to use for commits.
 The default is to fall back to the git repository config,
 then to `add-log-mailing-address' and then to `user-mail-address'." nil [2273 2575]) ("git-commits-coding-system" variable nil nil nil "Default coding system for the log message of git commits." nil [2578 2792]) ("git-append-signed-off-by" variable nil nil nil "Whether to append a Signed-off-by line to the commit message before editing." nil [2795 2950]) ("git-reuse-status-buffer" variable nil t nil "Whether `git-status' should try to reuse an existing buffer
 if there is already one that displays the same directory." nil [2953 3147]) ("git-per-dir-ignore-file" variable nil ".gitignore" nil "Name of the per-directory ignore file." nil [3150 3274]) ("git-show-uptodate" variable nil nil nil "Whether to display up-to-date files." nil [3277 3385]) ("git-show-ignored" variable nil nil nil "Whether to display ignored files." nil [3388 3492]) ("git-show-unknown" variable nil t nil "Whether to display unknown files." nil [3495 3597]) ("git-status-face" variable nil (quote ((((class color) (background light)) (:foreground "purple")) (((class color) (background dark)) (:foreground "salmon")))) nil "Git mode face used to highlight added and modified files." nil [3601 3834]) ("git-unmerged-face" variable nil (quote ((((class color) (background light)) (:foreground "red" :bold t)) (((class color) (background dark)) (:foreground "red" :bold t)))) nil "Git mode face used to highlight unmerged files." nil [3837 4072]) ("git-unknown-face" variable nil (quote ((((class color) (background light)) (:foreground "goldenrod" :bold t)) (((class color) (background dark)) (:foreground "goldenrod" :bold t)))) nil "Git mode face used to highlight unknown files." nil [4075 4320]) ("git-uptodate-face" variable nil (quote ((((class color) (background light)) (:foreground "grey60")) (((class color) (background dark)) (:foreground "grey40")))) nil "Git mode face used to highlight up-to-date files." nil [4323 4550]) ("git-ignored-face" variable nil (quote ((((class color) (background light)) (:foreground "grey60")) (((class color) (background dark)) (:foreground "grey40")))) nil "Git mode face used to highlight ignored files." nil [4553 4776]) ("git-mark-face" variable nil (quote ((((class color) (background light)) (:foreground "red" :bold t)) (((class color) (background dark)) (:foreground "tomato" :bold t)))) nil "Git mode face used for the file marks." nil [4779 5004]) ("git-header-face" variable nil (quote ((((class color) (background light)) (:foreground "blue")) (((class color) (background dark)) (:foreground "blue")))) nil "Git mode face used for commit headers." nil [5007 5217]) ("git-separator-face" variable nil (quote ((((class color) (background light)) (:foreground "brown")) (((class color) (background dark)) (:foreground "brown")))) nil "Git mode face used for commit separator." nil [5220 5437]) ("git-permission-face" variable nil (quote ((((class color) (background light)) (:foreground "green" :bold t)) (((class color) (background dark)) (:foreground "green" :bold t)))) nil "Git mode face used for permission changes." nil [5440 5676]) ("git-log-msg-separator" variable nil "--- log message follows this line ---" ((const . t)) nil nil [5764 5836]) ("git-log-edit-font-lock-keywords" variable nil (\` (("^\\(Author:\\|Date:\\|Merge:\\|Signed-off-by:\\)\\(.*\\)$" (1 font-lock-keyword-face) (2 font-lock-function-name-face)) ((\, (concat "^\\(" (regexp-quote git-log-msg-separator) "\\)$")) (1 font-lock-comment-face)))) nil nil nil [5839 6120]) ("git-get-env-strings" function nil ("env") nil "Build a list of NAME=VALUE strings from a list of environment strings." nil [6123 6302]) ("git-call-process" function nil ("buffer" "&rest" "args") nil "Wrapper for call-process that sets environment strings." nil [6305 6462]) ("git-call-process-display-error" function nil ("&rest" "args") nil "Wrapper for call-process that displays error messages." nil [6465 6977]) ("git-call-process-string" function nil ("&rest" "args") nil "Wrapper for call-process that returns the process output as a string,
 or nil if the git command failed." nil [6980 7234]) ("git-call-process-string-display-error" function nil ("&rest" "args") nil "Wrapper for call-process that displays error message and returns
 the process output as a string, or nil if the git command failed." nil [7237 7602]) ("git-run-process-region" function nil ("buffer" "start" "end" "program" "args") nil "Run a git process with a buffer region as input." nil [7605 7953]) ("git-run-command-buffer" function nil ("buffer-name" "&rest" "args") nil "Run a git command, sending the output to a buffer named BUFFER-NAME." nil [7956 8459]) ("git-run-command-region" function nil ("buffer" "start" "end" "env" "&rest" "args") nil "Run a git command with specified buffer region as input." nil [8462 8954]) ("git-run-hook" function nil ("hook" "env" "&rest" "args") nil "Run a git hook and display its output if any." nil [8957 9734]) ("git-get-string-sha1" function nil ("string") nil "Read a SHA1 from the specified string." nil [9737 9914]) ("git-get-committer-name" function nil nil nil "Return the name to use as GIT_COMMITTER_NAME." nil [9917 10254]) ("git-get-committer-email" function nil nil nil "Return the email address to use as GIT_COMMITTER_EMAIL." nil [10257 10631]) ("git-get-commits-coding-system" function nil nil nil "Return the coding system to use for commits." nil [10634 10978]) ("git-get-logoutput-coding-system" function nil nil nil "Return the coding system used for git-log output." nil [10981 11401]) ("git-escape-file-name" function nil ("name") nil "Escape a file name if necessary." nil [11404 11847]) ("git-success-message" function nil ("text" "files") nil "Print a success message after having handled FILES." nil [11850 12081]) ("git-get-top-dir" function nil ("dir") nil "Retrieve the top-level directory of a git tree." nil [12084 12571]) ("git-append-to-ignore" function nil ("file") nil "Add a file name to the ignore file in its directory." nil [12596 13388]) ("eval-when-compile" code nil [13451 13756]) ("git-rev-parse" function nil ("rev") nil "Parse a revision name and return its SHA1." nil [13865 14011]) ("git-config" function nil ("key") nil "Retrieve the value associated to KEY in the git repository config file." nil [14014 14216]) ("git-symbolic-ref" function nil ("ref") nil "Wrapper for the git-symbolic-ref command." nil [14219 14403]) ("git-update-ref" function nil ("ref" "newval" "&optional" "oldval" "reason") nil "Update a reference by calling git-update-ref." nil [14406 14788]) ("git-for-each-ref" function nil ("&rest" "specs") nil "Return a list of refs using git-for-each-ref.
 Each entry is a cons of (SHORT-NAME . FULL-NAME)." nil [14791 15234]) ("git-read-tree" function nil ("tree" "&optional" "index-file") nil "Read a tree into the index file." nil [15237 15537]) ("git-write-tree" function nil ("&optional" "index-file") nil "Call git-write-tree and return the resulting tree SHA1 as a string." nil [15540 15878]) ("git-commit-tree" function nil ("buffer" "tree" "parent") nil "Create a commit and possibly update HEAD.
 Create a commit with the message in BUFFER using the tree with hash TREE.
 Use PARENT as the parent of the new commit. If PARENT is the current \"HEAD\",
 update the \"HEAD\" reference to the new commit." nil [15881 18354]) ("git-empty-db-p" function nil nil nil "Check if the git db is empty (no commit done yet)." nil [18357 18507]) ("git-get-merge-heads" function nil nil nil "Retrieve the merge heads from the MERGE_HEAD file if present." nil [18510 18920]) ("git-get-commit-description" function nil ("commit") nil "Get a one-line description of COMMIT." nil [18923 19362]) ("git-fileinfo" type "struct" ("marked" "state" "name" "old-perm" "new-perm" "rename-state" "orig-name" "needs-update" "needs-refresh") nil nil name nil [19501 20050]) ("git-status" variable nil nil nil nil nil [20096 20119]) ("git-set-fileinfo-state" function nil ("info" "state") nil "Set the state of a file info." nil [20122 20558]) ("git-status-filenames-map" function nil ("status" "func" "files" "&rest" "args") nil "Apply FUNC to the status files names in the FILES list.
 The list must be sorted." nil [20561 21131]) ("git-set-filenames-state" function nil ("status" "files" "state") nil "Set the state of a list of named files. The list must be sorted" nil [21134 21487]) ("git-state-code" function nil ("code") nil "Convert from a string to a added/deleted/modified state." nil [21490 21741]) ("git-status-code-as-string" function nil ("code") nil "Format a git status code as string." nil [21744 22314]) ("git-file-type-as-string" function nil ("old-perm" "new-perm") nil "Return a string describing the file type based on its permissions." nil [22317 23695]) ("git-rename-as-string" function nil ("info") nil "Return a string describing the copy or rename associated with INFO, or an empty string if none." nil [23698 24249]) ("git-permissions-as-string" function nil ("old-perm" "new-perm") nil "Format a permission change as string." nil [24252 24576]) ("git-fileinfo-prettyprint" function nil ("info") nil "Pretty-printer for the git-fileinfo structure." nil [24579 25216]) ("git-update-node-fileinfo" function nil ("node" "info") nil "Update the fileinfo of the specified node. The names are assumed to match already." nil [25219 25660]) ("git-insert-info-list" function nil ("status" "infolist" "files") nil "Insert a sorted list of file infos in the status buffer, replacing existing ones if any." nil [25663 27024]) ("git-run-diff-index" function nil ("status" "files") nil "Run git-diff-index on FILES and parse the results into STATUS.
 Return the list of files that haven't been handled." nil [27027 28639]) ("git-find-status-file" function nil ("status" "file") nil "Find a given file in the status ewoc and return its node." nil [28642 28921]) ("git-run-ls-files" function nil ("status" "files" "default-state" "&rest" "options") nil "Run git-ls-files on FILES and parse the results into STATUS.
 Return the list of files that haven't been handled." nil [28924 29687]) ("git-run-ls-files-cached" function nil ("status" "files" "default-state") nil "Run git-ls-files -c on FILES and parse the results into STATUS.
 Return the list of files that haven't been handled." nil [29690 30502]) ("git-run-ls-unmerged" function nil ("status" "files") nil "Run git-ls-files -u on FILES and parse the results into STATUS." nil [30505 31056]) ("git-get-exclude-files" function nil nil nil "Get the list of exclude files to pass to git-ls-files." nil [31059 31397]) ("git-run-ls-files-with-excludes" function nil ("status" "files" "default-state" "&rest" "options") nil "Run git-ls-files on FILES with appropriate --exclude-from options." nil [31400 31866]) ("git-update-status-files" function nil ("&optional" "files" "mark-files") nil "Update the status of FILES from the index.
 The FILES list must be sorted." nil [31869 33530]) ("git-mark-files" function nil ("status" "files") nil "Mark all the specified FILES, and unmark the others." nil [33533 34428]) ("git-marked-files" function nil nil nil "Return a list of all marked files, or if none a list containing just the file at cursor position." nil [34431 34749]) ("git-marked-files-state" function nil ("&rest" "states") nil "Return a sorted list of marked files that are in the specified states." nil [34752 35060]) ("git-refresh-files" function nil nil nil "Refresh all files that need it and clear the needs-refresh flag." nil [35063 35479]) ("git-refresh-ewoc-hf" function nil ("status") nil "Refresh the ewoc header and footer." nil [35482 36534]) ("git-get-filenames" function nil ("files") nil (mapcar (lambda (info) (git-fileinfo->name info)) files) nil [36537 36630]) ("git-update-index" function nil ("index-file" "files") nil "Run git-update-index on a list of files." nil [36633 37472]) ("git-run-pre-commit-hook" function nil nil nil "Run the pre-commit hook if any." nil [37475 38147]) ("git-do-commit" function nil nil ((user-visible . t)) "Perform the actual commit using the current buffer as log message." nil [38150 40136]) ("git-mark-file" function nil nil ((user-visible . t)) "Mark the file that the cursor is on and move to the next one." nil [40236 40594]) ("git-unmark-file" function nil nil ((user-visible . t)) "Unmark the file that the cursor is on and move to the next one." nil [40597 40961]) ("git-unmark-file-up" function nil nil ((user-visible . t)) "Unmark the file that the cursor is on and move to the previous one." nil [40964 41335]) ("git-mark-all" function nil nil ((user-visible . t)) "Mark all files." nil [41338 41701]) ("git-unmark-all" function nil nil ((user-visible . t)) "Unmark all files." nil [41704 42103]) ("git-toggle-all-marks" function nil nil ((user-visible . t)) "Toggle all file marks." nil [42106 42451]) ("git-next-file" function nil ("&optional" "n") ((user-visible . t)) "Move the selection down N files." nil [42454 42640]) ("git-prev-file" function nil ("&optional" "n") ((user-visible . t)) "Move the selection up N files." nil [42643 42827]) ("git-next-unmerged-file" function nil ("&optional" "n") ((user-visible . t)) "Move the selection down N unmerged files." nil [42830 43326]) ("git-prev-unmerged-file" function nil ("&optional" "n") ((user-visible . t)) "Move the selection up N unmerged files." nil [43329 43823]) ("git-insert-file" function nil ("file") ((user-visible . t)) "Insert file(s) into the git-status buffer." nil [43826 44000]) ("git-add-file" function nil nil ((user-visible . t)) "Add marked file(s) to the index cache." nil [44003 44494]) ("git-ignore-file" function nil nil ((user-visible . t)) "Add marked file(s) to the ignore list." nil [44497 44893]) ("git-remove-file" function nil nil ((user-visible . t)) "Remove the marked file(s)." nil [44896 45764]) ("git-revert-file" function nil nil ((user-visible . t)) "Revert changes to the marked file(s)." nil [45767 47460]) ("git-remove-handled" function nil nil ((user-visible . t)) "Remove handled files from the status list." nil [47463 47950]) ("git-toggle-show-uptodate" function nil nil ((user-visible . t)) "Toogle the option for showing up-to-date files." nil [47953 48169]) ("git-toggle-show-ignored" function nil nil ((user-visible . t)) "Toogle the option for showing ignored files." nil [48172 48616]) ("git-toggle-show-unknown" function nil nil ((user-visible . t)) "Toogle the option for showing unknown files." nil [48619 49058]) ("git-expand-directory" function nil ("info") nil "Expand the directory represented by INFO to list its files." nil [49061 49490]) ("git-setup-diff-buffer" function nil ("buffer") nil "Setup a buffer for displaying a diff." nil [49493 49937]) ("git-diff-file" function nil nil ((user-visible . t)) "Diff the marked file(s) against HEAD." nil [49940 50204]) ("git-diff-file-merge-head" function nil ("arg") ((user-visible . t)) "Diff the marked file(s) against the first merge head (or the nth one with a numeric prefix)." nil [50207 50691]) ("git-diff-unmerged-file" function nil ("stage") nil "Diff the marked unmerged file(s) against the specified stage." nil [50694 50973]) ("git-diff-file-base" function nil nil ((user-visible . t)) "Diff the marked unmerged file(s) against the common base file." nil [50976 51123]) ("git-diff-file-mine" function nil nil ((user-visible . t)) "Diff the marked unmerged file(s) against my pre-merge version." nil [51126 51273]) ("git-diff-file-other" function nil nil ((user-visible . t)) "Diff the marked unmerged file(s) against the other's pre-merge version." nil [51276 51433]) ("git-diff-file-combined" function nil nil ((user-visible . t)) "Do a combined diff of the marked unmerged file(s)." nil [51436 51575]) ("git-diff-file-idiff" function nil nil ((user-visible . t)) "Perform an interactive diff on the current file." nil [51578 52115]) ("git-log-file" function nil nil ((user-visible . t)) "Display a log of changes to the marked file(s)." nil [52118 52613]) ("git-log-edit-files" function nil nil nil "Return a list of marked files for use in the log-edit buffer." nil [52616 52836]) ("git-log-edit-diff" function nil nil nil "Run a diff of the current files being committed from a log-edit buffer." nil [52839 53013]) ("git-append-sign-off" function nil ("name" "email") nil "Append a Signed-off-by entry to the current buffer, avoiding duplicates." nil [53016 53538]) ("git-setup-log-buffer" function nil ("buffer" "&optional" "merge-heads" "author-name" "author-email" "subject" "date" "msg") nil "Setup the log buffer for a commit." nil [53541 55057]) ("git-commit-file" function nil nil ((user-visible . t)) "Commit the marked file(s), asking for a commit message." nil [55060 56910]) ("git-setup-commit-buffer" function nil ("commit") nil "Setup the commit buffer with the contents of COMMIT." nil [56913 58105]) ("git-get-commit-files" function nil ("commit") nil "Retrieve a sorted list of files modified by COMMIT." nil [58108 58508]) ("git-read-commit-name" function nil ("prompt" "&optional" "default") nil "Ask for a commit name, with completion for local branch, remote branch and tag." nil [58511 58817]) ("git-checkout" function nil ("branch" "&optional" "merge") ((user-visible . t)) "Checkout a branch, tag, or any commit.
 Use a prefix arg if git should merge while checking out." nil [58820 59293]) ("git-branch" function nil ("branch") ((user-visible . t)) "Create a branch from the current HEAD and switch to it." nil [59296 59906]) ("git-amend-commit" function nil nil ((user-visible . t)) "Undo the last commit on HEAD, and set things up to commit an
 amended version of it." nil [59909 60579]) ("git-cherry-pick-commit" function nil ("arg") ((user-visible . t)) "Cherry-pick a commit." nil [60582 61491]) ("git-revert-commit" function nil ("arg") ((user-visible . t)) "Revert a commit." nil [61494 62481]) ("git-find-file" function nil nil ((user-visible . t)) "Visit the current file in its own buffer." nil [62484 62854]) ("git-find-file-other-window" function nil nil ((user-visible . t)) "Visit the current file in its own buffer in another window." nil [62857 63221]) ("git-find-file-imerge" function nil nil ((user-visible . t)) "Visit the current file in interactive merge mode." nil [63224 63504]) ("git-view-file" function nil nil ((user-visible . t)) "View the current file in its own buffer." nil [63507 63751]) ("git-refresh-status" function nil nil ((user-visible . t)) "Refresh the git status buffer." nil [63754 64008]) ("git-status-quit" function nil nil ((user-visible . t)) "Quit git-status mode." nil [64011 64098]) ("git-status-mode-hook" variable nil nil nil "Run after `git-status-mode' is setup." nil [64186 64262]) ("git-status-mode-map" variable nil nil nil "Keymap for git major mode." nil [64265 64329]) ("git-status" variable nil nil nil "List of all files managed by the git-status mode." nil [64332 64410]) ("unless" code nil [64413 68897]) ("put" code nil [68957 69000]) ("git-status-mode" function nil nil nil "Major mode for interacting with Git.
 Commands:
 \\{git-status-mode-map}" nil [69003 69735]) ("git-find-status-buffer" function nil ("dir") nil "Find the git status buffer handling a specified directory." nil [69738 70302]) ("git-status" function nil ("dir") ((user-visible . t)) "Entry point into git-status mode." nil [70305 70941]) ("git-update-saved-file" function nil nil nil "Update the corresponding git-status buffer when a file is saved.
 Meant to be used in `after-save-hook'." nil [70944 71642]) ("git-help" function nil nil ((user-visible . t)) "Display help for Git mode." nil [71645 71753]) ("git" package nil nil nil [71756 71770]))
    :unmatched-syntax 'nil
    )
   )
  )
